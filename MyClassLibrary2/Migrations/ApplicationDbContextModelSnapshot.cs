// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyClassLibrary2;

#nullable disable

namespace MyClassLibrary2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyClassLibrary2.Models.Calculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Operand1")
                        .HasColumnType("float");

                    b.Property<double>("Operand2")
                        .HasColumnType("float");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<int>("ShapeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShapeId");

                    b.ToTable("Calculations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Operand1 = 10.0,
                            Operand2 = 5.0,
                            Operator = "+",
                            PerformedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5295),
                            Result = 15.0,
                            ShapeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Operand1 = 20.0,
                            Operand2 = 4.0,
                            Operator = "/",
                            PerformedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5299),
                            Result = 5.0,
                            ShapeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Operand1 = 7.0,
                            Operand2 = 3.0,
                            Operator = "-",
                            PerformedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5302),
                            Result = 4.0,
                            ShapeId = 3
                        });
                });

            modelBuilder.Entity("MyClassLibrary2.Models.RockPaperScissors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalculationId")
                        .HasColumnType("int");

                    b.Property<string>("ComputerChoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlayedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerChoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShapeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId");

                    b.HasIndex("ShapeId");

                    b.ToTable("RockPaperScissorsResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalculationId = 1,
                            ComputerChoice = "sax",
                            PlayedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5326),
                            PlayerChoice = "sten",
                            Result = "Vinst",
                            ShapeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CalculationId = 2,
                            ComputerChoice = "sten",
                            PlayedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5330),
                            PlayerChoice = "påse",
                            Result = "Vinst",
                            ShapeId = 2
                        });
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Shape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Perimeter")
                        .HasColumnType("float");

                    b.Property<string>("ShapeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Shapes");

                    b.HasDiscriminator<string>("ShapeType").HasValue("Shape");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Parallelogram", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Base")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("SideLength")
                        .HasColumnType("float");

                    b.ToTable("Shapes", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("Parallelogram_Height");

                            t.Property("SideLength")
                                .HasColumnName("Parallelogram_SideLength");
                        });

                    b.HasDiscriminator().HasValue("Parallelogram");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Area = 28.0,
                            CalculatedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5218),
                            Perimeter = 18.0,
                            ShapeType = "Parallelogram",
                            Base = 4.0,
                            Height = 7.0,
                            SideLength = 5.0
                        });
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Rectangle", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.ToTable("Shapes", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("Rectangle_Height");
                        });

                    b.HasDiscriminator().HasValue("Rectangle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 50.0,
                            CalculatedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(4976),
                            Perimeter = 30.0,
                            ShapeType = "Rectangle",
                            Height = 10.0,
                            Width = 5.0
                        });
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Rhombus", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("SideLength")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Rhombus");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Area = 48.0,
                            CalculatedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5268),
                            Perimeter = 24.0,
                            ShapeType = "Rhombus",
                            Height = 8.0,
                            SideLength = 6.0
                        });
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Triangle", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Base")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.ToTable("Shapes", t =>
                        {
                            t.Property("Base")
                                .HasColumnName("Triangle_Base");

                            t.Property("Height")
                                .HasColumnName("Triangle_Height");
                        });

                    b.HasDiscriminator().HasValue("Triangle");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Area = 9.0,
                            CalculatedOn = new DateTime(2025, 1, 16, 3, 34, 46, 988, DateTimeKind.Local).AddTicks(5243),
                            Perimeter = 12.0,
                            ShapeType = "Triangle",
                            Base = 3.0,
                            Height = 6.0
                        });
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Calculation", b =>
                {
                    b.HasOne("MyClassLibrary2.Models.Shape", "Shape")
                        .WithMany("Calculations")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.RockPaperScissors", b =>
                {
                    b.HasOne("MyClassLibrary2.Models.Calculation", "Calculation")
                        .WithMany("RockPaperScissorsGames")
                        .HasForeignKey("CalculationId");

                    b.HasOne("MyClassLibrary2.Models.Shape", "Shape")
                        .WithMany("RockPaperScissorsGames")
                        .HasForeignKey("ShapeId");

                    b.Navigation("Calculation");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Calculation", b =>
                {
                    b.Navigation("RockPaperScissorsGames");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Shape", b =>
                {
                    b.Navigation("Calculations");

                    b.Navigation("RockPaperScissorsGames");
                });
#pragma warning restore 612, 618
        }
    }
}
