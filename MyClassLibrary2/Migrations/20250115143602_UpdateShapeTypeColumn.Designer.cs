// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myClassLibrary2;

#nullable disable

namespace MyClassLibrary2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250115143602_UpdateShapeTypeColumn")]
    partial class UpdateShapeTypeColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyClassLibrary2.Models.Calculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Operand1")
                        .HasColumnType("float");

                    b.Property<double>("Operand2")
                        .HasColumnType("float");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<int>("ShapeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShapeId");

                    b.ToTable("Calculations");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.RockPaperScissors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalculationId")
                        .HasColumnType("int");

                    b.Property<string>("ComputerChoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlayedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerChoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShapeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId");

                    b.HasIndex("ShapeId");

                    b.ToTable("RockPaperScissorsResults");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Shape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Perimeter")
                        .HasColumnType("float");

                    b.Property<string>("ShapeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Shapes");

                    b.HasDiscriminator<string>("ShapeType").HasValue("Shape");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Parallelogram", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Base")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("SideLength")
                        .HasColumnType("float");

                    b.ToTable("Shapes", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("Parallelogram_Height");

                            t.Property("SideLength")
                                .HasColumnName("Parallelogram_SideLength");
                        });

                    b.HasDiscriminator().HasValue("Parallelogram");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Rectangle", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.ToTable("Shapes", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("Rectangle_Height");
                        });

                    b.HasDiscriminator().HasValue("Rectangle");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Rhombus", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("SideLength")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Rhombus");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Triangle", b =>
                {
                    b.HasBaseType("MyClassLibrary2.Models.Shape");

                    b.Property<double>("Base")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.ToTable("Shapes", t =>
                        {
                            t.Property("Base")
                                .HasColumnName("Triangle_Base");

                            t.Property("Height")
                                .HasColumnName("Triangle_Height");
                        });

                    b.HasDiscriminator().HasValue("Triangle");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Calculation", b =>
                {
                    b.HasOne("MyClassLibrary2.Models.Shape", "Shape")
                        .WithMany("Calculations")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.RockPaperScissors", b =>
                {
                    b.HasOne("MyClassLibrary2.Models.Calculation", "Calculation")
                        .WithMany("RockPaperScissorsGames")
                        .HasForeignKey("CalculationId");

                    b.HasOne("MyClassLibrary2.Models.Shape", "Shape")
                        .WithMany("RockPaperScissorsGames")
                        .HasForeignKey("ShapeId");

                    b.Navigation("Calculation");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Calculation", b =>
                {
                    b.Navigation("RockPaperScissorsGames");
                });

            modelBuilder.Entity("MyClassLibrary2.Models.Shape", b =>
                {
                    b.Navigation("Calculations");

                    b.Navigation("RockPaperScissorsGames");
                });
#pragma warning restore 612, 618
        }
    }
}
